//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `ColorBlack`.
    static let colorBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorBlack")
    /// Color `ColorLabelDefault`.
    static let colorLabelDefault = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorLabelDefault")
    /// Color `ColorNoImage`.
    static let colorNoImage = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorNoImage")
    /// Color `ColorRating`.
    static let colorRating = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorRating")
    /// Color `ColorWhiteTransparent`.
    static let colorWhiteTransparent = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorWhiteTransparent")
    
    /// `UIColor(named: "ColorBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBlack, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorLabelDefault", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorLabelDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorLabelDefault, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorNoImage", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorNoImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorNoImage, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorRating", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorRating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorRating, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ColorWhiteTransparent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorWhiteTransparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorWhiteTransparent, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `IcStarEmpty`.
    static let icStarEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "IcStarEmpty")
    /// Image `IcStarFull`.
    static let icStarFull = Rswift.ImageResource(bundle: R.hostingBundle, name: "IcStarFull")
    
    /// `UIImage(named: "IcStarEmpty", bundle: ..., traitCollection: ...)`
    static func icStarEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icStarEmpty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "IcStarFull", bundle: ..., traitCollection: ...)`
    static func icStarFull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icStarFull, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
